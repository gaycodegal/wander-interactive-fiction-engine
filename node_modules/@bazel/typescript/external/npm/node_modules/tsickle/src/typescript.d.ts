/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <amd-module name="tsickle/src/typescript" />
/**
 * @fileoverview Abstraction over the TypeScript API that makes multiple
 * versions of TypeScript appear to be interoperable. Any time a breaking change
 * in TypeScript affects Tsickle code, we should extend this shim to present an
 * unbroken API.
 * All code in tsickle should import from this location, not from 'typescript'.
 */
import * as ts from 'typescript';
export { __String, addSyntheticLeadingComment, addSyntheticTrailingComment, AsExpression, AssertionExpression, BinaryExpression, Block, Bundle, CallExpression, CancellationToken, ClassDeclaration, ClassElement, ClassLikeDeclaration, CommentRange, CompilerHost, CompilerOptions, ConstructorDeclaration, createArrayLiteral, createArrayTypeNode, createArrowFunction, createAssignment, createBinary, createBlock, createCall, createCompilerHost, createElementAccess, createExportSpecifier, createFunctionDeclaration, createFunctionExpression, createFunctionTypeNode, createIdentifier, createIf, createIndexSignature, createKeywordTypeNode, createLiteral, createLiteralTypeNode, createNamedExports, createNodeArray, createNotEmittedStatement, createNull, createObjectLiteral, createParameter, createParen, createProgram, createProperty, createPropertyAccess, createPropertyAssignment, createPropertySignature, createSourceFile, createStatement, createToken, createTypeLiteralNode, createTypeReferenceNode, createUnionTypeNode, createVariableDeclaration, createVariableDeclarationList, createVariableStatement, CustomTransformers, Declaration, DeclarationStatement, DeclarationWithTypeParameters, Decorator, Diagnostic, DiagnosticCategory, ElementAccessExpression, EmitFlags, EmitResult, EntityName, EnumDeclaration, EnumMember, ExportDeclaration, ExportSpecifier, Expression, ExpressionStatement, ExpressionWithTypeArguments, flattenDiagnosticMessageText, forEachChild, formatDiagnostics, FormatDiagnosticsHost, FunctionDeclaration, FunctionLikeDeclaration, GetAccessorDeclaration, getCombinedModifierFlags, getCombinedNodeFlags, getLeadingCommentRanges, getLineAndCharacterOfPosition, getMutableClone, getOriginalNode, getPreEmitDiagnostics, getSyntheticLeadingComments, getSyntheticTrailingComments, getTrailingCommentRanges, HeritageClause, Identifier, IfStatement, ImportDeclaration, ImportEqualsDeclaration, ImportSpecifier, IndexKind, InterfaceDeclaration, isArrowFunction, isAssertionExpression, isBinaryExpression, isCallExpression, isExportAssignment, isExportDeclaration, isExpressionStatement, isExternalModule, isExternalModuleReference, isFunctionDeclaration, isIdentifier, isImportDeclaration, isImportEqualsDeclaration, isInterfaceDeclaration, isLiteralExpression, isLiteralTypeNode, isMethodSignature, isModuleBlock, isModuleDeclaration, isNamedImports, isNamespaceExportDeclaration, isNamespaceImport, isNonNullExpression, isObjectLiteralExpression, isParenthesizedExpression, isPropertyAccessExpression, isPropertyAssignment, isPropertyDeclaration, isPropertySignature, isQualifiedName, isSourceFile, isStringLiteral, isTypeReferenceNode, isVariableDeclaration, isVariableStatement, MethodDeclaration, Modifier, ModifierFlags, ModuleBlock, ModuleDeclaration, ModuleKind, ModuleResolutionHost, NamedDeclaration, NamedImports, NamespaceExportDeclaration, Node, NodeArray, NodeBuilderFlags, NodeFlags, NonNullExpression, NotEmittedStatement, ObjectFlags, ObjectLiteralElementLike, ObjectLiteralExpression, ObjectType, ParameterDeclaration, parseCommandLine, parseJsonConfigFileContent, Program, PropertyAccessExpression, PropertyAssignment, PropertyDeclaration, PropertyName, PropertySignature, QualifiedName, readConfigFile, resolveModuleName, ScriptTarget, SetAccessorDeclaration, setCommentRange, setEmitFlags, setOriginalNode, setSourceMapRange, setSyntheticLeadingComments, setSyntheticTrailingComments, setTextRange, Signature, SignatureDeclaration, SignatureKind, SourceFile, Statement, StringLiteral, Symbol, SymbolFlags, SymbolFormatFlags, SyntaxKind, SynthesizedComment, sys, TextRange, ThisExpression, Token, TransformationContext, Transformer, TransformerFactory, Type, TypeAliasDeclaration, TypeAssertion, TypeChecker, TypeElement, TypeFlags, TypeNode, TypeParameterDeclaration, TypeReference, TypeReferenceNode, UnionType, updateAsExpression, updateBlock, updateConstructor, updateExportDeclaration, updateExpressionWithTypeArguments, updateGetAccessor, updateHeritageClause, updateMethod, updateNamedExports, updateNonNullExpression, updateParameter, updatePropertyAccess, updateSetAccessor, updateSourceFileNode, updateTypeAssertion, VariableDeclaration, VariableStatement, visitEachChild, visitFunctionBody, visitLexicalEnvironment, visitNode, Visitor, visitParameterList, WriteFileCallback } from 'typescript';
export declare const SyntaxKindJSDocSignature: ts.SyntaxKind;
export declare function getEmitFlags(node: ts.Node): ts.EmitFlags | undefined;
export declare let updateProperty: typeof ts.updateProperty;
